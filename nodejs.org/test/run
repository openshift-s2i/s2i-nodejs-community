#!/bin/bash
#
# The 'run' performs a simple test that verifies that S2I image.
# The main focus here is to exercise the S2I scripts.
#
# For more information see the documentation:
# https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

IMAGE_NAME=${IMAGE_NAME-ryanj/centos7-s2i-nodejs-candidate}
NODE_VERSION=${NODE_VERSION}
IMAGE_TAG=${IMAGE_NAME}":"${NODE_VERSION};

# Determining system utility executables (darwin compatibility check)
READLINK_EXEC="readlink"
MKTEMP_EXEC="mktemp"
if (echo "$OSTYPE" | grep -qs 'darwin'); then
  ! type -a "greadlink" &>"/dev/null" || READLINK_EXEC="greadlink"
  ! type -a "gmktemp" &>"/dev/null" || MKTEMP_EXEC="gmktemp"
fi

test_project=${1:-test-app}
test_dir="$($READLINK_EXEC -zf $(dirname "${0}"))"
image_dir=$($READLINK_EXEC -zf ${test_dir}/..)
cid_file=$($MKTEMP_EXEC -u --suffix=.cid)

# Since we built the candidate image locally, we don't want S2I to attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never "

# Port the image exposes service to be tested
test_port="$(docker inspect --format='{{range $key, $value := .ContainerConfig.ExposedPorts }}{{$key}}{{end}}' ${IMAGE_TAG} | sed 's/\/.*//')"

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat $cid_file)
}

container_ip() {
  if [ ! -z "$DOCKER_HOST" ] && (echo "$OSTYPE" | grep -qs 'darwin'); then
    docker-machine ip
  else
    echo "localhost"
  fi
}

container_port() {
    docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' $(cat $cid_file)
}

run_s2i_build() {
  s2i build ${s2i_args} file://${test_dir}/${test_project} ${IMAGE_TAG} ${IMAGE_NAME}-${test_project}
}

prepare() {
  if ! image_exists ${IMAGE_TAG}; then
    echo "ERROR: The image ${IMAGE_TAG} must exist before this script is executed."
    exit 1
  fi
  # s2i build requires the application is a valid 'Git' repository
  pushd ${test_dir}/${test_project} >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit --no-gpg-sign -m "Sample commit"
  popd >/dev/null
}

run_test_application() {
  echo "Starting test application"
  docker run --rm --user=100001 --cidfile=${cid_file} -p ${test_port} ${IMAGE_NAME}-${test_project}
}

cleanup() {
  if [ -f $cid_file ]; then
    if container_exists; then
      docker stop $(cat $cid_file)
    fi
    rm -rf $cid_file
  fi
  if image_exists ${IMAGE_NAME}-${test_project}; then
    echo "Removing image ${IMAGE_NAME}-${test_project}"
    docker rmi -f ${IMAGE_NAME}-${test_project}
  fi
  rm -rf ${test_dir}/${test_project}/.git
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    echo "S2I image '${IMAGE_TAG}' test FAILED (exit code: ${result})"
    cleanup
    exit $result
  fi
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && container_exists && break
    echo "Waiting for container to start..."
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  echo "Waiting for test application start, sleep 5 seconds"
  sleep 5
}

test_s2i_usage() {
  echo "Testing 's2i usage'..."
  s2i usage ${s2i_args} ${IMAGE_TAG} &>/dev/null
}

test_docker_run_usage() {
  echo "Testing 'docker run' usage..."
  docker run --rm ${IMAGE_TAG} &>/dev/null
}

test_connection() {
  echo "Testing HTTP connection..."
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1

  while [ $attempt -le $max_attempts ]; do
    echo "Sending GET request($attempt) to http://$(container_ip):$(container_port)/"
    response_code=$(curl -s -w %{http_code} -o /dev/null http://$(container_ip):$(container_port)/)
    status=$?
    if [ $status -eq 0 ]; then
      if [ $response_code -eq 200 ]; then
        result=0
      fi
      break
    fi
    echo "Validating response_code($response_code) == 200"
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  return $result
}

test_scl_usage() {
  local run_cmd="$1"
  local expected="$2"

  echo "Checking nodejs runtime version ..."
  out=$(docker run --rm ${IMAGE_TAG} /bin/bash -c "${run_cmd}")
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(cat ${cid_file}) /bin/bash -c "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(cat ${cid_file}) /bin/sh -ic "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/sh -ic "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
}

# Sets and Gets the NODE_ENV environment variable from the container.
get_set_node_env_from_container() {
  local node_env="$1"

  echo $(docker run --rm --env NODE_ENV=$node_env $IMAGE_TAG /bin/bash -c 'echo "$NODE_ENV"')
}

# Gets the NODE_ENV environment variable from the container.
get_default_node_env_from_container() {
  echo $(docker run --rm $IMAGE_TAG /bin/bash -c 'echo "$NODE_ENV"')
}

test_node_env_and_environment_variables() {
  local default_node_env="production"
  local node_env_prod="production"
  local node_env_dev="development"
  echo 'Validating default NODE_ENV, verifying ability to configure using Env Vars...'
 
  result=0
 
  if [ "$default_node_env" != $(get_default_node_env_from_container) ]; then
    echo "ERROR default NODE_ENV should be '$default_node_env'"
    result=1
  fi

  if [ "$node_env_prod" != $(get_set_node_env_from_container "$node_env_prod") ]; then
    echo "ERROR: NODE_ENV was unsuccessfully set to '$node_env_prod' mode"
    result=1
  fi

  if [ "$node_env_dev" != $(get_set_node_env_from_container "$node_env_dev") ]; then
    echo "ERROR: NODE_ENV unsuccessfully set to '$node_env_dev' mode"
    result=1
  fi
  
  return $result
}

# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
prepare
run_s2i_build
check_result $?

# Verify the 'usage' script is working properly when running the base image with 's2i usage ...'
test_s2i_usage
check_result $?

# Verify the 'usage' script is working properly when running the base image with 'docker run ...'
test_docker_run_usage
check_result $?

# Verify that the HTTP connection can be established to test application container
run_test_application &

# Wait for the container to write it's CID file
wait_for_cid

test_scl_usage "node --version" "v${NODE_VERSION}"
check_result $?

test_connection
check_result $?

test_node_env_and_environment_variables
check_result $?

echo "Success!"
cleanup

check_result $?
echo "All tests finished successfully."
